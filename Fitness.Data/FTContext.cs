// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Fitness.Model.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace Fitness.Data;

public partial class FTContext : DbContext
{
    public FTContext(DbContextOptions<FTContext> options)
        : base(options)
    {
    }


    public virtual DbSet<ActividadFisica> ActividadesFisicas { get; set; }

    public virtual DbSet<Dieta> Dietas { get; set; }

    public virtual DbSet<Genero> Generos { get; set; }

    public virtual DbSet<MetaSalud> MetasSalud { get; set; }

    public virtual DbSet<TipoActividadFisica> TiposActividadesFisicas { get; set; }

    public virtual DbSet<TipoAltura> TiposAlturas { get; set; }

    public virtual DbSet<TipoComida> TipoComida { get; set; }

    public virtual DbSet<TipoDistancia> TiposDistancias { get; set; }

    public virtual DbSet<TipoMeta> TiposMetas { get; set; }

    public virtual DbSet<TipoPeso> TiposPesos { get; set; }

    public virtual DbSet<Usuario> Usuarios { get; set; }


    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {

        if (!optionsBuilder.IsConfigured)
        {
            var builder = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json", optional: true, reloadOnChange: true);

            IConfigurationRoot configuration = builder.Build();
            optionsBuilder.UseSqlServer(configuration.GetConnectionString("PR"));
        }


    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("SQL_Latin1_General_CP1_CI_AS");

        modelBuilder.Entity<ActividadFisica>(entity =>
        {
            entity.ToTable("ActividadFisica");

            entity.Property(e => e.Comentarios)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Fecha).HasColumnType("datetime");

            entity.HasOne(d => d.TipoNavigation).WithMany(p => p.ActividadFisicas)
                .HasForeignKey(d => d.Tipo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ActividadFisica_TipoActivadadFisica");

            entity.HasOne(d => d.TipoDistanciaNavigation).WithMany(p => p.ActividadFisicas)
                .HasForeignKey(d => d.TipoDistancia)
                .HasConstraintName("FK_ActividadFisica_TipoDistancia");

            entity.HasOne(d => d.UsuarioNavigation).WithMany(p => p.ActividadFisicas)
                .HasForeignKey(d => d.Usuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ActividadFisica_Usuario");
        });

        modelBuilder.Entity<Dieta>(entity =>
        {
            entity.Property(e => e.AlimentosConsumidos)
                .IsRequired()
                .IsUnicode(false);
            entity.Property(e => e.Comentarios)
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.Fecha).HasColumnType("datetime");

            entity.HasOne(d => d.TipoComidaNavigation).WithMany(p => p.Dieta)
                .HasForeignKey(d => d.TipoComida)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Dieta_TipoComida");

            entity.HasOne(d => d.UsuarioNavigation).WithMany(p => p.Dieta)
                .HasForeignKey(d => d.Usuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Dieta_Usuario");
        });

        modelBuilder.Entity<Genero>(entity =>
        {
            entity.ToTable("Genero");

            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<MetaSalud>(entity =>
        {
            entity.ToTable("MetaSalud");

            entity.Property(e => e.NivelActividad)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false);
            entity.Property(e => e.OjectivoEspecifico)
                .HasMaxLength(500)
                .IsUnicode(false);

            entity.HasOne(d => d.TipoMetaNavigation).WithMany(p => p.MetaSalud)
                .HasForeignKey(d => d.TipoMeta)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MetaSalud_TipoMeta");

            entity.HasOne(d => d.UsuarioNavigation).WithMany(p => p.MetaSalud)
                .HasForeignKey(d => d.Usuario)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MetaSalud_Usuario");
        });

        modelBuilder.Entity<TipoActividadFisica>(entity =>
        {
            entity.ToTable("TipoActividadFisica");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TipoAltura>(entity =>
        {
            entity.ToTable("TipoAltura");

            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TipoComida>(entity =>
        {
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TipoDistancia>(entity =>
        {
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TipoMeta>(entity =>
        {
            entity.Property(e => e.Descripcion)
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<TipoPeso>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_Peso");

            entity.ToTable("TipoPeso");

            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.ToTable("Usuario");

            entity.Property(e => e.Contrasena)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Correo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.FechaNacimiento).HasColumnType("datetime");
            entity.Property(e => e.Foto)
                .IsUnicode(false)
                .HasDefaultValueSql("(NULL)");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.NombreUsuario)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);

            entity.HasOne(d => d.GeneroNavigation).WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.Genero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Usuario_Genero");

            entity.HasOne(d => d.TipoAlturaNavigation).WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.TipoAltura)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Usuario_TipoAltura");

            entity.HasOne(d => d.TipoPesoNavigation).WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.TipoPeso)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Usuario_TipoPeso");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}